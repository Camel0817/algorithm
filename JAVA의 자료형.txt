원시 자료형
	- byte
	- short
	- int
	- long
	- float
	- double
	- boolean
	- char

참조 자료형
	-





참조 자료형과 원시 자료형의 차이
	- 원시형은 자바 메모리 모델에서 훨씬 더 빠른 영역에서 할당된다. 반면 참조형은 좀 더 느린 영역에서 할당된다.

	- 원시형은 자료형에 따라 크기가 제각각이며, 자료형 크기만큼의 메모리만 할당된다.
	  반면 참조형은 일정한 크기의 메모리가 할당된다. 대신 크기가 훨씬 크다

	- 참조형은 메소드 호출을 통해 여러 편리한 작업을 수행할 수 있다.

	- 원시형은 항상 값이 존재해야 하며, 널이 될 수 없다. 
	   반면 참조형은 널이 될 수 있다.

	- 컬렉션의 엘리먼트는 참조형만 가능하다.

	- 원시형을 선언하는 키워드는 소문자로 시작하며, 참조형은 대문자로 시작한다. 


컬렉션 프레임워크
	이점
		- 일관성 있는 API 		: 동일한 기능을 하는 자료형은 공통 인터페이스를 제공한다. 
						EX) List나 Set 모두 엘리먼트를 삽입하는 메소드는 add()로 동일하다.

		- 개발 비용 절약 		: 필수 데이터 구조와 알고리즘을 미리 구현하여 제공하므로 개발자가 일일이 알고리즘을 구현할 필요가 없다.

		- 고성능 구현 제공 	: 잘 만든 고성능 구현을 제공하므로 개발자가 직접 개발할지라도 이보다 더 잘 만들기는 어렵다.

		- 재사용 가능 		: 공통 표준을 제공하므로 재사용이 가능하다.

	구조
		Collection
			- List 	: 순서대로 엘리먼트를 모아두는 모음집
			- Set 	:  List와 유사하지만 중복을 허용하지 않는다.
			- Queue	: 큐 자료구조 인터페이스다 (9장참조)
			- Deque	: 양쪽에서 삽입과 삭제를 처리할 수 있는, 스택과 큐의 특징을 모두 갖고 있는 인터페이스로 Queue를 확장해 정의 (10장참조)

		Map	: Collection을 확장하지않고 별도로 구현되어 있다. 별도로 구현되는 만큼 List,Set과는 조금 다르게 동작,
			   메소드 명칭도 조금씩 다르다. Collection을 확장한 List,Set,Queue 등은 모두 값으로만 구성된 자료형이지만
			  Map은  Key / Value를 함께 갖는 자료형이라는 차이가 있다.

	* List, Set, Map, 은 각각 어떤 역할을 해야 하는지 정의된 인터페이스이여서 실제로 구현되어 있지 않으므로,
	  구현클래스를 이용해 구현한다.
		

LIST
	- ArrayList 	: 리스트의 가장 기본이되는 구현이며 가장 자주 쓰게 될 자료형이다.
	- LinkedList	: 리스트를 연결 리스트로 구현한 자료형이다. 이중 연결리스트(Doubly Linked List)로 구현되어있으며,
			  자바에서 연결 리스트 자료형이라고하면 대부분 이 자료형을 의미한다.
	- Vector	: 더 이상 사용하지 않는 초기자료형

MAP
	- HashMap	: 기본적인 해시 테이블 구조의 자료형으로, 맵이 필요한 경우 대부분  HashMap 자료형을 사용한다.
			  단, 입력 순서를 보장하지 않는다는 점에 주의해야 한다. HashTable 자료구조는 기본적으로 입력 순서에 관여하지 않는다.
	- LinkedHashMap	: 입력 순서를 유지되는 HashMap
	- Treemap	: 값에 따라 순서를 정렬한다. 특정 조건에 따라 정렬된 상태가 필요하다면 이 자료형을 사용하면 된다.
	- HashTable	: 더 이상 사용하지 않는 초기자료형

무한대 크기의 숫자를 저장할수 있는 BigInteger
	정수를 숫자의 배열로 간주하여 저장함
	
	
	