코틀린의 자료형
	- Byte
	- Short
	- Int
	- Long
	- Float
	- Double
	- Boolean
	- Char

	코틀린의 자료형은 자바와 별반 다르지않지만, 원시자료형을 제공하지 않는다.
	모든 자료형을 참조자료형으로 제공한다.
	즉, Java에서는 int와 Integer 함께 사용하는데 반해 
	Kotlin은 Int라는 단일 자료형만 제공한다.

	But, Kotlin의 참조자료형은 Java의 원시자료형보다 느리지않다.
	내부적으로는 자바의 원시형과 참조형을 상황에 맞게 활용한다.

코틀린의 컬렉션 프레임워크
	코틀린은 Java의 컬렉션 프레임워크를 쓰고있다.
	그로인한 장점	1. 자바의 표준 컬렉션을 이용하면 호환성이 높다.
			2. 자바와 코틀린 간에 호출이 일어날 때 서로 변환할 필요가 없다.

	하지만, 코틀린의 프레임워크는 자바 클래스가 지원하는 기능만 제공하지 않는다.
		=> 더욱 유용한 기능들이 많다.
	why????
		Kotlin의 확장함수 기능 덕분이다.
		확장함수는 클래스 선언 밖에서 함수를 확장할수있다.
		ex ) fun List<Int>.lastElement(): Int = this.get(this.size-1)
			list.lastElement()

코틀린이 별도로 구현한 인터페이스
	- MutableList
	- MutableSet
	- MutableMap

		Kotlin은 불변성을 중요시함..
		그래서 val이라는 상수를 기본으로함, 그건 컬렉션도 마찬가지임
		그래서 컬렉션의 추가,삭제를 하고싶을경우 Mutable로 해야함

	코틀린의 Map은 LinkedHashMap이 기본이다.
	입력 순서를 보장한다.








