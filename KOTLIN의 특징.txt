특징
	- 실용성
	- 상호운용성
		기존 자바와의 완벽한 호환
	- 안정성
		Null Safety
			val a1: String? = null // 널이될수 있음
			val a2: String = null // 널이될수 없으며 에러발생
	- 우아함
		1.0 버전 2016년
		간결하면서도 가독성 높은 코드

가시성 제어자
	- public
		어디서든 접근가능 (자바와 동일하지만 부여하지 않을경우 public가 디폴트)
	- private
		클래스 내에서만 접근가능 (자바와 동일)
	- protected
		상속받은 클래스에서만 접근가능 (자바와 동일)
		코틀린의 경우 클래스 선언 시 final이 디폴트이기 때문에 상속을 허용하려면 open을 별도로 선언해야 함
	- internal
		동일 모듈로 접근을 제한 (자바에서의 default)

코틀린의 빌드 과정

	코틀린 소스코드 =>	코틀린 컴파일러 =>	자바 바이트 코드 =>	코틀린 런타임 -> jar => 자바실행환경(JRE)

	코틀린의 경우 자바와 런타임 속도는 동일하나 컴파일 타임이 느림	
	
		